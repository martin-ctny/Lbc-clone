{"ast":null,"code":"var _jsxFileName = \"/Users/martincantonny/Desktop/code/atelier/clone-lbc/mongoose/app/src/components/autocomplete/Autocomplete.jsx\",\n  _s = $RefreshSig$();\nimport { TextField } from \"@mui/material\";\nimport React, { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Autocomplete(_ref) {\n  _s();\n  let {\n    id\n  } = _ref;\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (inputRef.current) {\n      const autocomplete = new window.google.maps.places.Autocomplete(inputRef.current, {\n        types: [\"geocode\"]\n      });\n      autocomplete.addListener(\"place_changed\", onPlaceChanged);\n    }\n  }, [inputRef]);\n  function onPlaceChanged() {\n    function onPlaceChanged() {\n      const place = autocomplete.getPlace();\n      if (!place.geometry) {\n        console.error(\"Invalid place geometry\");\n        return;\n      }\n\n      // Extraire des informations sur l'emplacement sélectionné\n      const address = place.formatted_address;\n      const latitude = place.geometry.location.lat();\n      const longitude = place.geometry.location.lng();\n      const placeId = place.place_id;\n\n      // Utiliser les informations pour mettre à jour l'état de votre application\n      // ou appeler une fonction de rappel fournie par les props\n      // Par exemple : onPlaceSelected(address, latitude, longitude, placeId);\n    }\n  }\n\n  const handleChange = e => {\n    console.log(e.target.value);\n  };\n  return (\n    /*#__PURE__*/\n    // <input id={id} ref={inputRef} placeholder=\"Start typing your address...\" />\n    _jsxDEV(TextField, {\n      label: \"Start typing your address...\",\n      variant: \"outlined\",\n      type: \"text\",\n      name: \"title\",\n      onChange: handleChange,\n      id: id,\n      inputRef: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Autocomplete, \"cBQ6FQ+sf5H+lvNONLKqtm4aeQ8=\");\n_c = Autocomplete;\nexport default Autocomplete;\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["TextField","React","useRef","useEffect","jsxDEV","_jsxDEV","Autocomplete","_ref","_s","id","inputRef","current","autocomplete","window","google","maps","places","types","addListener","onPlaceChanged","place","getPlace","geometry","console","error","address","formatted_address","latitude","location","lat","longitude","lng","placeId","place_id","handleChange","e","log","target","value","label","variant","type","name","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/martincantonny/Desktop/code/atelier/clone-lbc/mongoose/app/src/components/autocomplete/Autocomplete.jsx"],"sourcesContent":["import { TextField } from \"@mui/material\";\nimport React, { useRef, useEffect } from \"react\";\n\nfunction Autocomplete({ id }) {\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      const autocomplete = new window.google.maps.places.Autocomplete(\n        inputRef.current,\n        {\n          types: [\"geocode\"],\n        }\n      );\n      autocomplete.addListener(\"place_changed\", onPlaceChanged);\n    }\n  }, [inputRef]);\n\n  function onPlaceChanged() {\n    function onPlaceChanged() {\n      const place = autocomplete.getPlace();\n\n      if (!place.geometry) {\n        console.error(\"Invalid place geometry\");\n        return;\n      }\n\n      // Extraire des informations sur l'emplacement sélectionné\n      const address = place.formatted_address;\n      const latitude = place.geometry.location.lat();\n      const longitude = place.geometry.location.lng();\n      const placeId = place.place_id;\n\n      // Utiliser les informations pour mettre à jour l'état de votre application\n      // ou appeler une fonction de rappel fournie par les props\n      // Par exemple : onPlaceSelected(address, latitude, longitude, placeId);\n    }\n  }\n\n  const handleChange = (e) => {\n    console.log(e.target.value);\n  };\n\n  return (\n    // <input id={id} ref={inputRef} placeholder=\"Start typing your address...\" />\n    <TextField\n      label=\"Start typing your address...\"\n      variant=\"outlined\"\n      type=\"text\"\n      name=\"title\"\n      onChange={handleChange}\n      id={id}\n      inputRef={inputRef}\n    />\n  );\n}\n\nexport default Autocomplete;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,OAAOC,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,YAAYA,CAAAC,IAAA,EAAS;EAAAC,EAAA;EAAA,IAAR;IAAEC;EAAG,CAAC,GAAAF,IAAA;EAC1B,MAAMG,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE7BC,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,CAACC,OAAO,EAAE;MACpB,MAAMC,YAAY,GAAG,IAAIC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACV,YAAY,CAC7DI,QAAQ,CAACC,OAAO,EAChB;QACEM,KAAK,EAAE,CAAC,SAAS;MACnB,CAAC,CACF;MACDL,YAAY,CAACM,WAAW,CAAC,eAAe,EAAEC,cAAc,CAAC;IAC3D;EACF,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEd,SAASS,cAAcA,CAAA,EAAG;IACxB,SAASA,cAAcA,CAAA,EAAG;MACxB,MAAMC,KAAK,GAAGR,YAAY,CAACS,QAAQ,EAAE;MAErC,IAAI,CAACD,KAAK,CAACE,QAAQ,EAAE;QACnBC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;QACvC;MACF;;MAEA;MACA,MAAMC,OAAO,GAAGL,KAAK,CAACM,iBAAiB;MACvC,MAAMC,QAAQ,GAAGP,KAAK,CAACE,QAAQ,CAACM,QAAQ,CAACC,GAAG,EAAE;MAC9C,MAAMC,SAAS,GAAGV,KAAK,CAACE,QAAQ,CAACM,QAAQ,CAACG,GAAG,EAAE;MAC/C,MAAMC,OAAO,GAAGZ,KAAK,CAACa,QAAQ;;MAE9B;MACA;MACA;IACF;EACF;;EAEA,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1BZ,OAAO,CAACa,GAAG,CAACD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAED;IAAA;IACE;IACAjC,OAAA,CAACL,SAAS;MACRuC,KAAK,EAAC,8BAA8B;MACpCC,OAAO,EAAC,UAAU;MAClBC,IAAI,EAAC,MAAM;MACXC,IAAI,EAAC,OAAO;MACZC,QAAQ,EAAET,YAAa;MACvBzB,EAAE,EAAEA,EAAG;MACPC,QAAQ,EAAEA;IAAS;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACnB;AAEN;AAACvC,EAAA,CApDQF,YAAY;AAAA0C,EAAA,GAAZ1C,YAAY;AAsDrB,eAAeA,YAAY;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}