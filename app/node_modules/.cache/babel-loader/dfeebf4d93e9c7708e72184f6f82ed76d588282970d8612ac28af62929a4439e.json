{"ast":null,"code":"var _jsxFileName = \"/Users/martincantonny/Desktop/code/atelier/clone-lbc/mongoose/app/src/components/autocomplete/Autocomplete.jsx\",\n  _s = $RefreshSig$();\nimport { TextField } from \"@mui/material\";\nimport React, { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Autocomplete(_ref) {\n  _s();\n  let {\n    id\n  } = _ref;\n  const inputRef = useRef(null);\n  useEffect(() => {\n    function AddAutoComplete() {\n      const options = {\n        componentRestrictions: {\n          country: \"fr\"\n        },\n        fields: [\"address_components\", \"geometry\", \"icon\", \"name\"],\n        strictBounds: false\n      };\n      console.log(inputLocation.current);\n      const autocomplete = new window.google.maps.places.Autocomplete(inputLocation.current, options);\n      window.google.maps.event.addListener(autocomplete, \"place_changed\", function () {\n        const autocompleteValue = autocomplete.getPlace();\n        inputLocation.current.addEventListener(\"keydown\", e => {\n          if (e.keyCode == 13) {\n            e.preventDefault();\n            console.log(\"auto => \", autocompleteValue);\n          }\n        });\n      });\n    }\n    window.initMap = AddAutoComplete;\n    if (inputRef.current) {\n      const autocomplete = new window.google.maps.places.Autocomplete(inputRef.current, {\n        types: [\"geocode\"]\n      });\n      autocomplete.addListener(\"place_changed\", onPlaceChanged);\n    }\n  }, [inputRef]);\n  function onPlaceChanged() {\n    const place = autocomplete.getPlace();\n    if (!place.geometry) {\n      console.error(\"Invalid place geometry\");\n      return;\n    }\n\n    // Extraire des informations sur l'emplacement sélectionné\n    const address = place.formatted_address;\n    const latitude = place.geometry.location.lat();\n    const longitude = place.geometry.location.lng();\n    const placeId = place.place_id;\n\n    // Utiliser les informations pour mettre à jour l'état de votre application\n    // ou appeler une fonction de rappel fournie par les props\n    // Par exemple : onPlaceSelected(address, latitude, longitude, placeId);\n  }\n\n  const handleChange = e => {\n    console.log(e.target.value);\n  };\n  return (\n    /*#__PURE__*/\n    // <input id={id} ref={inputRef} placeholder=\"Start typing your address...\" />\n    _jsxDEV(TextField, {\n      label: \"Start typing your address...\",\n      variant: \"outlined\",\n      type: \"text\",\n      name: \"title\",\n      onChange: handleChange,\n      id: id,\n      inputRef: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Autocomplete, \"cBQ6FQ+sf5H+lvNONLKqtm4aeQ8=\");\n_c = Autocomplete;\nexport default Autocomplete;\nvar _c;\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"names":["TextField","React","useRef","useEffect","jsxDEV","_jsxDEV","Autocomplete","_ref","_s","id","inputRef","AddAutoComplete","options","componentRestrictions","country","fields","strictBounds","console","log","inputLocation","current","autocomplete","window","google","maps","places","event","addListener","autocompleteValue","getPlace","addEventListener","e","keyCode","preventDefault","initMap","types","onPlaceChanged","place","geometry","error","address","formatted_address","latitude","location","lat","longitude","lng","placeId","place_id","handleChange","target","value","label","variant","type","name","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/martincantonny/Desktop/code/atelier/clone-lbc/mongoose/app/src/components/autocomplete/Autocomplete.jsx"],"sourcesContent":["import { TextField } from \"@mui/material\";\nimport React, { useRef, useEffect } from \"react\";\n\nfunction Autocomplete({ id }) {\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    function AddAutoComplete() {\n      const options = {\n        componentRestrictions: { country: \"fr\" },\n        fields: [\"address_components\", \"geometry\", \"icon\", \"name\"],\n        strictBounds: false,\n      };\n      console.log(inputLocation.current);\n      const autocomplete = new window.google.maps.places.Autocomplete(\n        inputLocation.current,\n        options\n      );\n\n      window.google.maps.event.addListener(\n        autocomplete,\n        \"place_changed\",\n        function () {\n          const autocompleteValue = autocomplete.getPlace();\n\n          inputLocation.current.addEventListener(\"keydown\", (e) => {\n            if (e.keyCode == 13) {\n              e.preventDefault();\n              console.log(\"auto => \", autocompleteValue);\n            }\n          });\n        }\n      );\n    }\n    window.initMap = AddAutoComplete;\n\n    if (inputRef.current) {\n      const autocomplete = new window.google.maps.places.Autocomplete(\n        inputRef.current,\n        {\n          types: [\"geocode\"],\n        }\n      );\n      autocomplete.addListener(\"place_changed\", onPlaceChanged);\n    }\n  }, [inputRef]);\n\n  function onPlaceChanged() {\n    const place = autocomplete.getPlace();\n\n    if (!place.geometry) {\n      console.error(\"Invalid place geometry\");\n      return;\n    }\n\n    // Extraire des informations sur l'emplacement sélectionné\n    const address = place.formatted_address;\n    const latitude = place.geometry.location.lat();\n    const longitude = place.geometry.location.lng();\n    const placeId = place.place_id;\n\n    // Utiliser les informations pour mettre à jour l'état de votre application\n    // ou appeler une fonction de rappel fournie par les props\n    // Par exemple : onPlaceSelected(address, latitude, longitude, placeId);\n  }\n\n  const handleChange = (e) => {\n    console.log(e.target.value);\n  };\n\n  return (\n    // <input id={id} ref={inputRef} placeholder=\"Start typing your address...\" />\n    <TextField\n      label=\"Start typing your address...\"\n      variant=\"outlined\"\n      type=\"text\"\n      name=\"title\"\n      onChange={handleChange}\n      id={id}\n      inputRef={inputRef}\n    />\n  );\n}\n\nexport default Autocomplete;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}